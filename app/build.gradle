apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

String getLocalProperty(String name) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$projectDir/local.properties"))
    return properties.getProperty(name)
}

static String getProperty(String filename, String name) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(filename))
    return properties.getProperty(name)
}

static String quoted(String input) {
    return "\"$input\""
}

android {

    compileSdkVersion = 31

    defaultConfig {

        applicationId "edu.cnm.deepdive.astronomypictures"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /*buildConfigField 'String', 'CLIENT_ID',
                quoted(getProperty("$projectDir/../../../services/astronomypictures.properties", 'client_id'))*/

        buildConfigField 'String', 'API_KEY',
                quoted(getProperty("$projectDir/../../../services/astronomypictures.properties", 'api_key'))

        buildConfigField 'String', 'BASE_URL',
                quoted(getProperty("$projectDir/../../../services/astronomypictures.properties", 'base_url'))

        resValue "string", "app_name", rootProject.name

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        'room.schemaLocation': "$projectDir/schemas".toString()
                ]
            }
        }


    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    //noinspection GroovyAssignabilityCheck
    buildFeatures {
        //noinspection GroovyAssignabilityCheck
        viewBinding true
    }

}


dependencies {
    // Basic Android Support Libraries
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Material Design Components
    implementation 'com.google.android.material:material:1.4.0'

    // Preferences/settings library
    implementation 'androidx.preference:preference:1.1.1'

    // Navigation Libraries
    implementation 'androidx.fragment:fragment:1.4.0'
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"

    // Lifecycle (LiveData and ViewModel Libraries)
    def lifecycleVersion = '2.4.0'
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Room Libraries & Connectors
    def roomVersion = '2.3.0'
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // Gson Library
    implementation 'com.google.code.gson:gson:2.8.9'

    // Retrofit Libraries
    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // OkHTTP Library
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.2'

    // ReactiveX Libraries
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Google Sign-In Library
    implementation 'com.google.android.gms:play-services-auth:19.2.0'

    // Stetho (Chromium inspection) Library
    implementation 'com.facebook.stetho:stetho:1.6.0'

    // picasso library
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Test Libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc."
}

android.applicationVariants.all { variant ->

    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {

        title "$rootProject.name (${project.android.defaultConfig.versionName})"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(
                    file(projectDir)
                            .toPath()
                            .resolve("build/intermediates/javac/${variant.name}/classes"),
                    variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath()
            )
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        options {
            windowTitle = "$rootProject.name (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
            author = false
            links 'https://docs.oracle.com/javase/8/docs/api/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        failOnError true

    }

    task.dependsOn "assemble${variant.name.capitalize()}"
    generateApiDoc.dependsOn task
}